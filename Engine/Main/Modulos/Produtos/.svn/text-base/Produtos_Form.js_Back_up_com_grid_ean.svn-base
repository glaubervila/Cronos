/**
 * @package     : Produtos
 * @name        : Produtos_Form
 * @Diretorio   : Main/Modulos/Produtos/
 * @date        : 24/11/2010
 * @version     : 1.0
 */
var Produtos_Form = Ext.extend(Ext.Window,{

    id: 'Produtos_Form'
    , identificacao : '5001' // Identificacao para permissoes

    , main_url   : 'main.php'
    , main_class : 'Produtos'
    , pk_id      : 'pk_id_produto'
    , metodo_load  : 'load_produto_id'
    , metodo_delete: 'deleteProdutos'
    , metodo_submit: 'criaAtualiza'

    , IdRegistro: 0

    , modal  : true
    , constrain: true
    , maximizable: true
    , width  : 600
    , height : 400
    , title  : 'Cadastro de Produtos'
    , layout : 'fit'
    , autoScroll : true

    // Essa janela sera reaproveitada, por isso closeAction deve ser HIDE
    , closeAction: 'hide'

    , setRegistroID: function(IdRegistro) {
        this.IdRegistro = IdRegistro;
    }

    // Permissoes 0 Desabilitado / 1 Habilitado
    , perm_insert: 0
    , perm_delete: 0
    , perm_update: 0
    , perm_impres: 0

    , constructor: function() {
        // Tratamento de Permissoes
        indice = permissoes_store.findExact('identificacao', this.identificacao);
        record = permissoes_store.getAt(indice);
        this.perm_insert = record.data.ins;
        this.perm_delete = record.data.del;
        this.perm_update = record.data.upd;
        this.perm_execut = record.data.exc;
        this.perm_impres = record.data.imp;


        // adiciono um evento a classe. Esse evento sera disparado posteriormente quando o clica no botao salvar
        this.addEvents({
            salvar: true
            , excluir: true
        });

        Produtos_Form.superclass.constructor.apply(this,arguments);
    }

    , initComponent: function() {
        //Ext.QuickTips.init();
        // turn on validation errors beside the field globally
        Ext.form.Field.prototype.msgTarget = 'side';

        this.cod_ean_Grid = new cod_ean_Grid({
            height: 400
        });

        // ComboBox Categoria
        this.cmbCategoria = new Ext.form.ComboBox({
            root             : 'rows'
            , id             : 'combo_Categoria'
            , fieldLabel     : 'Categoria'
            , hiddenName     : 'fk_id_categoria'
            , triggerAction  : 'all'
            , valueField     : 'pk_id_categoria'
            , displayField   : 'categoria'
            , emptyText      : 'Selecione uma Categoria'
            , width          : 300
            , mode           : 'local'
            , allowBlank     : false
            , store          : new Ext.data.JsonStore({
                url           : this.main_url
                , root        : 'rows'
                , idProperty  : 'pk_id_categoria'
                , autoLoad    : true
                , autoDestroy : true
                , baseParams  : {
                    classe   : 'Categoria'
                    , action : 'getCategoriasCmb'
                }
                , fields:[
                    {name:'pk_id_categoria', type:'int'}
                    , {name:'categoria'    , type:'string'}
                ]
            })
        })

        // ComboBox Tributacao
        this.cmbTributacao = new Ext.form.ComboBox({
            root             : 'rows'
            , id             : 'combo_Tributacao'
            , fieldLabel     : 'Tributacao'
            , hiddenName     : 'tributacao'
            , triggerAction  : 'all'
            , valueField     : 'pk_id_tributacao'
            , displayField   : 'tributacao'
            , emptyText      : 'Selecione uma Tributacao'
            , width          : 120
            , mode           : 'local'
            , allowBlank     : false
            , store          : new Ext.data.JsonStore({
                url           : this.main_url
                , root        : 'rows'
                , idProperty  : 'pk_id_tributacao'
                , autoLoad    : true
                , autoDestroy : true
                , baseParams  : {
                    classe   : 'Tributacao'
                    , action : 'load_tributacao_cmb'
                }
                , fields:[
                    {name:'pk_id_tributacao', type:'int'}
                    , {name:'tributacao'    , type:'string'}
                ]
            })
        })

        this.foto_produto = new Ext.BoxComponent({
            autoEl: {
                tag: 'img'
                , src: 'Main/Data/Imagens_Produtos/390729_580x325.JPG'
                , id: 'Foto_produto_detalhe'
                , width: 100
                , height:100
            }
        })

        //formulario
        this.formPanel = new Ext.form.FormPanel({
            bodyStyle      : 'padding:10px;'
            , border       : false
            , fileUpload   : true
            , labelAlign     : 'top'
            , items:[{
                name       : 'fk_id_ean'
                , xtype    : 'hidden'
                , id       : 'txt_ean'
            },
            this.cmbCategoria
            ,{
                fieldLabel   : 'Descricao Curta'
                , name       : 'descricao_curta'
                , xtype      : 'textfield'
                , width      : 300
                , minLength  : 3
                , maxLength  : 40
                , allowBlank : false
            },{
                fieldLabel   : 'Descricao Longa'
                , name       : 'descricao_longa'
                , xtype      : 'textfield'
                , width      : 300
                , minLength  : 3
                , maxLength  : 255
                , allowBlank : false
            },{
                xtype        :'fileuploadfield'
                , fieldLabel :'Foto do Produto'
                , width      : 300
                , buttonText : '...'
            },{
                xtype        : 'e-Cmb_Unidade'
                , id         : 'produtos_Cmb_Unidade'
                , hiddenName : 'unidade'
                , width      : 120
            }
            ,this.cmbTributacao
            ,{
                fieldLabel       : 'Garantia'
                , xtype          : 'combo'
                , hiddenName     : 'garantia'
                , triggerAction  : 'all'
                , forceSelection : true
                , width          : 120
                , mode           : 'local'
                , valueField     : 'Valor'
                , displayField   : 'Valor'
                , emptyText      : 'Selecione'
                , store: new Ext.data.SimpleStore({
                    fields:['id', 'Valor']
                    , data: [
                        [1, '3 Dias']
                        , [2, '7 Dias']
                        , [3, '15 Dias']
                        , [4, '30 Dias']
                        , [5, '60 Dias']
                        , [6, '90 Dias']
                        , [7, '1 Ano']
                        , [8, '2 Anos']
                        , [9, '3 Anos']
                    ]
                })
            }
            //, this.cod_ean_Grid
            ]
        })

        Ext.apply(this,{
            items  : this.formPanel
            , bbar : ['->'
            , this.btnSalvar = new Ext.Button({
                text     : 'Salvar'
                , iconCls: 'silk-disk'
                , scope  : this
                , handler: this._onBtnSalvarClick
            })
            , this.btnExcluir = new Ext.Button({
                text     : 'Excluir'
                , iconCls: 'silk-delete'
                , scope  : this
                , handler: this._onBtnDeleteClick
            })
            ,{
                text     : 'Cancelar'
                , iconCls: 'silk-cross'
                , scope  : this
                , handler: this._onBtnCancelarClick
            }]
        })
        Produtos_Form.superclass.initComponent.call(this);
    }

    /*
     * Sobreescrevo o metodo show de Ext.Window para aplicar a seguinte rotina:
     * Se IdRegistro foi informado, carrega o form, senao, reseta o form.
     */
    , show: function() {
        Produtos_Form.superclass.show.apply(this,arguments);
        this.formPanel.getForm().reset();
        //se tem usuario
        if(this.IdRegistro !== 0) {
            this.btnExcluir.show();
            // Tratamento de Permissoes
            // o usuario pode excluir?
            if(this.perm_delete == 0){
                this.btnExcluir.disable();
            }
            // o usuario pode alterar?
            if(this.perm_update == 0){
                this.btnSalvar.disable();;
            }

            this.el.mask('Carregando informa&ccedil;&otilde;es');
            Ext.getCmp('main_statusbar').msg('load');

            /*
             * Carregando o formulario. Ele deve respeitar algums formatos especificiados na documentacao ext de
             * Ext.form.Action.Load, como por exemplo conter uma propriedade success e data.
             */
            this.formPanel.getForm().load({
                url : this.main_url
                , params : {
                    classe   : this.main_class
                    , action : this.metodo_load
                    , 'pk_id_produto': this.IdRegistro
                }
                , scope: this
                , success: this._onFormLoad
            });
        }
        //se nao existir usuario
        else {
            //nao pode excluir
            this.btnExcluir.hide();
            if(this.perm_insert == 0){
                this.btnSalvar.disable();;
            }
            // Resetando o formulario
            this.formPanel.getForm().reset();
        }
    }

    // Limpa variaveis alocadas
    , onDestroy: function() {
        Produtos_Form.superclass.onDestroy.apply(this,arguments);
        this.formPanel = null;
    }

    // Listeners

    // Listener disparado ao carregar o formulario
    , _onFormLoad: function(form, request) {
        var data = request.result.data;

        this.cod_ean_Grid.store.baseParams.pk_id_produto = data.pk_id_produto;
        this.cod_ean_Grid.store.load();

        this.el.unmask();
        Ext.getCmp('main_statusbar').clearStatus();
    }

    // Listener disparado ao clicar no botao salvar
    , _onBtnSalvarClick: function() {
        //pego o formulario
        var form = this.formPanel.getForm();

        // recuperar o store da grid EAN
        var store = this.cod_ean_Grid.store;

        //Pega só os dados de cada registro modificado
        var mod = [];
        Ext.each(store.getModifiedRecords(), function(e){
            mod.push(e.data);
        });
        //alert(Ext.encode(mod));
        // atribuir o json ao campo hidden
        Ext.getCmp('txt_ean').setRawValue(Ext.encode(mod));


        //verifico se e valido
        if(!form.isValid()) {
            Ext.Msg.alert('Aten&ccedil;&atilde;o','Preencha corretamente todos os campos!');
            return false;
        }
        // crio uma mascara
        this.el.mask('Salvando informa&ccedil;&otilde;es');
        Ext.getCmp('main_statusbar').msg('saving');

        // Submitando formulario
        form.submit({
            url: this.main_url
            , params: {
                classe       : this.main_class
                , action     : this.metodo_submit
                , 'pk_id_produto' : this.IdRegistro
            }
            , scope:this
            //ao terminar de submitar
            , success: function() {
                // Salvando as alteracoes na Grid
                store.commitChanges();
                //tiro mascara
                this.el.unmask();
                Ext.getCmp('main_statusbar').msg('save');
                //esconde janela
                this.hide();
                // Muito importante! Aqui o evento salvar sera disparado. Todos os listeners que foram associados a esse evento serao notificados, como por exemplo, o listener _onCadastroGruposUsuarios Salvar da classe Grid.
                this.fireEvent('salvar',this);
            }
        });
    }

    // Listener disparado ao clicar em excluir
    , _onBtnDeleteClick: function() {
        Ext.Msg.confirm('Confirma&ccedil;&otilde;o','Deseja mesmo excluir esse registro?',function(opt) {
            if(opt === 'no') {
                return
            }
            else {
                this.el.mask('Excluindo Registro.');
                Ext.getCmp('main_statusbar').msg('job');
                Ext.Ajax.request({
                    url: this.main_url
                    , params: {
                        classe   : this.main_class
                        , action : this.metodo_delete
                        , 'pk_id_produto' : this.IdRegistro
                    }
                    , scope: this
                    , success: function() {
                        this.el.unmask();
                        Ext.getCmp('main_statusbar').msg('ok');
                        this.hide();
                        // Evento personalizado excluir sendo disparado
                        this.fireEvent('excluir',this);
                    }
                })
            }
        },this)
    }

    // Listener disparado ao clicar em cancelar
    , _onBtnCancelarClick: function() {
        Ext.Msg.confirm('Confirma&ccedil;&atilde;o','Deseja mesmo cancelar esse cadastro?',function(opt) {
            if(opt === 'yes') {
                //esconde window
                this.hide();
            }
        },this)
    }
});


// =====================================//=====================================

var cod_ean_Grid = Ext.extend(Ext.grid.EditorGridPanel,{

    border     : false
    , stripeRows : true
    , loadMask   : true
    , id         : 'produto_ean_Grid'

    , main_url   : 'main.php'
    , main_class : 'Produtos'
    , pk_id      : 'pk_id_ean'
    , metodo_load  : 'load_produto_ean'
    , metodo_delete: 'deleteProdutos'
    , metodo_submit: 'criaAtualiza'

    , disableSelection:false

    ,initComponent: function() {

        var reader = new Ext.data.JsonReader({
            totalProperty: 'totalCount'
            , successProperty: 'success'
            , idProperty: this.pk_id
            , root: 'rows'
            , messageProperty: 'message'  // <-- New "messageProperty" meta-data
        }, [
            {name: 'pk_id_ean'}
            , {name: 'fk_id_produto'}
            , {name: 'fk_sku_produto'}
            , {name: 'ean'}
        ]);

        // The new DataWriter component.
        var writer = new Ext.data.JsonWriter({
            encode: true
            , writeAllFields: false
        });

        //store do grid
        this.store = new Ext.data.JsonStore({
            url              : this.main_url
            , root           : 'rows'
            , idProperty     : this.pk_id
            , totalProperty  : 'totalCount'
            //, autoLoad       : true
            //, autoDestroy    : true
            , reader         : reader
            , writer         : writer
            , clicksToEdit   : 2
            , autoSave       : false
            , baseParams     : {
                classe     : this.main_class
                , action   : this.metodo_load
                , limit    : 30
                , pk_id_produto: 0
            }
            , fields:[
                {name:this.pk_id          , type:'int'}
                , {name: 'fk_id_produto'  , type:'int'}
                , {name: 'fk_sku_produto' , type:'int'}
                , {name: 'ean'            , type:'int'}
            ]
        });

        //demais atributos do grid
        Ext.apply(this,{
            viewConfig:{
                emptyText      : 'Nenhum registro encontrado'
                , forceFit:true
                , deferEmptyText : false
            }
            ,tbar: [{
                text     : 'Novo'
                , id     : 'btnNovo'
                , iconCls: 'silk-add'
                , scope  : this
                , handler: this.onAdd
                , tooltip: {title:'Criar Novo Registro',text:'Click para adicionar um novo registro'}
            }]
            , columns:[
            {
                dataIndex   : 'pk_id_ean'
                , header    : 'pk_id_ean'
                //, hidden    : true
                //, editor    : new Ext.form.TextField()
            },{
                dataIndex   : 'fk_id_produto'
                , header    : 'fk_id_produto'
                //, editor    : new Ext.form.TextField()
            },{
                dataIndex   : 'fk_sku_produto'
                , header    : 'fk_sku_produto'
                //, editor    : new Ext.form.TextField()
            },{
                dataIndex   : 'ean'
                , header    : 'EAN13'
                , width     : 100
                , sortable  : true
                , editor    : new Ext.form.TextField()
            }]
        })

        cod_ean_Grid.superclass.initComponent.call(this);
    }

//     , initEvents: function() {
//         cod_ean_Grid.superclass.initEvents.call(this);
//
//     }

    //Overrides

    // liberar as referências feitas quando uma interface é destruída.
    , onDestroy: function() {
        cod_ean_Grid.superclass.onDestroy.apply(this,arguments);
        //destroi a janela
    }


    , onAdd : function(btn, ev) {
        var u = new this.store.recordType({
            pk_id_ean : ''
            , fk_id_produto  : ''
            , fk_sku_produto : ''
            , ean            : ''
        });
        this.stopEditing();
        this.store.insert(0, u);
        this.startEditing(0, 1);
    }
    // Listener disparado ao clicar no botao "Excluir Selecionados"
    , _onBtnExcluirSelecionadosClick: function() {

    }


//     , _onGridRowDblClick: function( grid, rowIndex, e ){
//         //busca registro da linha selecionada
//         var record = grid.getStore().getAt(rowIndex);
//
//         //extrai id
//         //var usuarioID = record.get('id');
//
//         //cria janela de cadastro
//         this._criaWindowForm();
//
//         //seta atributos
//         this._WinForm.setRegistroID(record);
//         this._WinForm.setFlagUpdate(true);
//         //mostra
//         this._WinForm.show();
//     }

    , _onCadastroSalvarExcluir: function() {
        //recarrega grid
        this.store.reload();
    }

    //Demais métodos



});
Ext.reg('e-cod_ean_Grid', cod_ean_Grid);

// =====================================//=====================================
